name: 'Fantastic site'
driver: pgsql
database:
  # Any tables that are NOT mentioned here would be fully copied from DB.
  tables:
    # Get 1.5% of rows (random) from this table.
    orders: 0.015
    # Get 50% of news for the last month from the hottest categories.
    latest_news:
      get: 0.5
      table: content
      # Here you can use any valid sql operators for comparison.
      where:
        type: news
        created: ['(NOW() - INTERVAL 1 MONTH)', '>=']
        category_id: ['(5, 18)', 'IN']
    # Don't copy data from tables whose names match the regex.
    cache_:
      table_regex: '/^cache_.*/'
      get: 0
    # Get 80% of rows from this table.
    # The `export_method: row` option means that each row would be immediately
    # saved to the file during the export.
    # By default, all selected rows are saved to the file at once to improve
    # performance and reduce disk usage. But it can cause errors due to
    # insufficient memory in case if you have super large data dumps or super
    # low RAM available.
    # Just keep in mind that this option exists, but try to use default
    # behavior first.
    actions:
      get: 0.8
      export_method: row

  # Here you can set anonymization rules for DB tables data.
  anonymization:
    private_files:
      table: files
      # Apply this anonymization to rows with deleted=0, status!=0
      # and uri matching regex.
      # Here you can use simple php comparison operators and regex.
      where:
        deleted: 0
        status: [0, '!=']
        uri: ['!^private://.*!', 'regex']
      # Specify fields to anonymize.
      fields:
        # You can use any Faker method to generate some value here
        # (see more at https://fakerphp.github.io/).
        # Generate a filename (ex: 'aeliyodulp.txt').
        filename:
          method: 'Faker::lexify'
          args:
            - '??????????.txt'
        # Compose uri using generated filename (ex: 'private://aeliyodulp.txt').
        uri:
          method: concat
          args:
            - 'private://'
            - '%filename'
        # Replace file mime with a simple value.
        filemime: text/plain
    # Anonymize some data from users table (affects all rows).
    users:
      fields:
        # Generate a new username in a following format: [random_word]_[user_id]
        # (ex: architecto_42).
        name:
          method: concat
          args:
            -
              method: 'Faker::word'
            - _
            - '%id'
        # Replace password hash with a simple value.
        pass: '-'
        # Compose email using username (ex: architecto_42@test.test)
        mail:
          method: concat
          args:
            - '%name'
            - '@test.test'
        # Erase additional user data.
        data: null
